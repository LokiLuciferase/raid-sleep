#!/usr/bin/env python2
#
import os, sys, argparse, time
from subprocess import Popen, PIPE


def parse_args():
    global args

    parser = argparse.ArgumentParser(
        description = "Power down RAID disks after a specified timeout"
    )

    parser.add_argument(
        "--version", action = "version",
        version = "%(prog)s 1.0.1"
    )

    parser.add_argument(
        "-q", "--quiet", dest = "verbose",
        default = True, action = "store_false",
        help = "do not print status messages",
    )

    parser.add_argument(
        "-t", "--timeout", dest = "timeout",
        default = 1800, type = int,
        help = "standby timeout in seconds (default: %(default)s)"
    )

    parser.add_argument(
        "disk", nargs = "+",
        help = "Disks to monitor"
    )

    args = parser.parse_args()

    args.disk_devs = [ os.path.realpath(d) for d in args.disk ]


def dprint(*str):
    if args.verbose:
        for s in str:
            print s,
        print


def power_down():
    # hdparm may take a long time, so execute in parallel
    #
    for p in [
        Popen([ "hdparm", "-y", d ], stdout = PIPE)
        for d in args.disk_devs
    ]: p.wait()


def wake_up():
    for p in [
        Popen([ "hdparm", "--read-sector", "0", d ], stdout = PIPE)
        for d in args.disk_devs
    ]: p.wait()


def diskstats():
    # see https://www.kernel.org/doc/Documentation/iostats.txt
    #
    columns = [
        "major_dev_num", "minor_dev_num", "device",
        "reads", "reads_merged", "sectors_read", "ms_reading",
        "writes", "writes_merged", "sectors_written", "ms_writing",
        "current_ios", "ms_doing_io", "weighted_ms_doing_io"
    ]

    result = {}
    for line in open("/proc/diskstats"):
        parts = line.split()
        if len(parts) != len(columns):
            continue

        data = dict( zip(columns, parts) )

        result["/dev/" + data["device"]] = {
            k:int(v) for k, v in data.items() if k != "device"
        }

    return result


def hms(s):
    return "%d:%02d:%02d" % (s / 3600, s / 60 % 60, s % 60)

# ----- ----- ----- ----- -----

old_stats = None
last_access = time.time()
last_standby = last_access
disk_state = 1

parse_args()

dprint(
    "Monitoring %s. Timeout = %s" % (
        ", ".join(args.disk_devs), hms(args.timeout)
    )
)

while True:
    stats = diskstats()
    stats = { k:v for k,v in stats.items() if k in args.disk_devs }

    now = time.time()

    if old_stats and old_stats != stats:
        if disk_state == 0:
            disk_state = 1
            last_standby = now

            dprint("Waking up after %s of sleep" % hms(now - last_access))
            wake_up()

        last_access = now

    if now - last_access > args.timeout:
        if disk_state == 1:
            disk_state = 0

            dprint("Powering down after %s" % hms(now - last_standby))
            power_down()

    old_stats = stats
    time.sleep(1)
